/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sopra.generated.api;

import com.sopra.generated.model.ClientDTO;
import com.sopra.generated.model.ClientResultListDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-04T02:13:04.009845800+01:00[Europe/Madrid]")
@Validated
@Tag(name = "Client", description = "Client specific data.")
public interface ClientApi {

    default ClientApiDelegate getDelegate() {
        return new ClientApiDelegate() {};
    }

    /**
     * GET /clients : Get All Actifs Clients
     *
     * @param currentPage  (required)
     * @param sizePage  (required)
     * @return SUCCESS (status code 200)
     *         or NOT FOUND (status code 404)
     *         or BAD REQUEST (status code 400)
     */
    @Operation(
        operationId = "getAllClients",
        summary = "Get All Actifs Clients",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCCESS", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientResultListDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "NOT FOUND"),
            @ApiResponse(responseCode = "400", description = "BAD REQUEST")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientResultListDTO> getAllClients(
        @NotNull @Parameter(name = "currentPage", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "currentPage", required = true) Integer currentPage,
        @NotNull @Parameter(name = "sizePage", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "sizePage", required = true) Integer sizePage
    ) throws Exception {
        return getDelegate().getAllClients(currentPage, sizePage);
    }


    /**
     * GET /clients/{idClient} : Retrieve an client
     *
     * @param idClient  (required)
     * @return SUCCESS (status code 200)
     *         or NOT FOUND (status code 404)
     *         or BAD REQUEST (status code 400)
     */
    @Operation(
        operationId = "getClient",
        summary = "Retrieve an client",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCCESS", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "NOT FOUND"),
            @ApiResponse(responseCode = "400", description = "BAD REQUEST")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{idClient}",
        produces = { "application/json" }
    )
    default ResponseEntity<ClientDTO> getClient(
        @Parameter(name = "idClient", description = "", required = true, in = ParameterIn.PATH) @PathVariable("idClient") Long idClient
    ) throws Exception {
        return getDelegate().getClient(idClient);
    }

}
